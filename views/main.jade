p to do list
ul 
	li farm
	li prevent abusing
		ul
			li levelup bonus
			li levelup unit in server-side
	li monster with haste
script
	var socket
		, LEVELUP_UNIT_MAXHEALTH = 10
		, LEVELUP_UNIT_ATTACK = 1;
	jx.ready(function() {
		socket = io.connect('/');
		socket.on('connect', function() {
			// connected
		});
		socket.on('hero updated', function(updated) {
			for( var i in updated ) {
				hero[i] = updated[i];
			}
			refreshHero();
		});
		socket.on('hero levelup', function(updated) {
			alert('level up!');
			hero = updated;
			refreshHero();
		});
		socket.on('monsters', function(monsters) {
			// pick random one
			var i = Math.floor(Math.random()*monsters.length);
			// monster data
			var m = monsters[i];
			m.id = 'enemy'+(enemyCount++);
			m.health = m.maxhealth;
			// monster element
			var e = document.createElement('div');
			e.class = 'goblin';
			e.id = m.id;
		
			e.innerHTML = "<h2><span class='name'>"+m.name+"</span> "
				+"(level <span class='level'>"+m.level+"</span>)</h2>"
				+"<ul><li>health : <span class='health'>"+m.health+"</span> / <span class='maxhealth'>"+m.maxhealth+"</span></li>"
				+"<li>attack : <span class='attack'>"+m.attack+"</span></li>"
				+"<li>expbonus : <span class='expbonus'>"+m.expbonus+"</span></li>"
				+ "</ul><input id='attackBtn' type='button' value='Attack' />"
			
			jx.id('enemies').appendChild(e);
			enemies.push(m);
			e.childNodes[2].addEventListener('click', onclick_attack);
		});
		socket.on('hero created', function(data) {
			location.reload(true);
		});
	});

- if (hero)
	h1 Combat
	div(id='hero')
		h2 
			span(class='name') #{hero.name}
			|  (level 
			span(class='level') #{hero.level}
			| )
		ul
			li exp : 
				span(class='exp') #{hero.exp}
			li health : 
				span(class='health') #{hero.health}
				|  / 
				span(class='maxhealth') #{hero.maxhealth}
				if ( hero.bonus > 0 ) 
					input(id='bonusBtn1', type='button', value='+', onclick='onclick_bonusHealth();')
			li attack : 
				span(class='attack') #{hero.attack}
				if ( hero.bonus > 0 ) 
					input(id='bonusBtn2', type='button', value='+', onclick='onclick_bonusAttack();')
			li bonus : 
				span(class='bonus') #{hero.bonus}
	div(id='enemies')
	input(id='newEnemyBtn', type='button', value='New Enemy')
	script
		var hero = {
			level :#{hero.level}
			, exp : #{hero.exp}
			, health : #{hero.health}
			, maxhealth : #{hero.maxhealth}
			, attack : #{hero.attack}
			, bonus : #{hero.bonus}
		}
		var target
			, enemies = []
			,	enemyCount = 0;
		function onclick_bonusHealth() {
			hero.health += LEVELUP_UNIT_MAXHEALTH;
			hero.maxhealth += LEVELUP_UNIT_MAXHEALTH;
			spendBonus();
			updateHero();
		}
		function onclick_bonusAttack() {
			hero.attack += LEVELUP_UNIT_ATTACK;
			spendBonus();
			updateHero();
		}
		function spendBonus() {
			if( --hero.bonus <= 0 ) {
				jx.id('bonusBtn1').style.visibility = 'hidden';
				jx.id('bonusBtn2').style.visibility = 'hidden';
			}
		}
		function refreshHero() {	
			if( hero.bonus > 0 ) {
				jx.id('bonusBtn1').style.visibility = 'visible';
				jx.id('bonusBtn2').style.visibility = 'visible';
			}
			jx.q('#hero .level').innerHTML = hero.level;
			jx.q('#hero .exp').innerHTML = hero.exp;
			jx.q('#hero .health').innerHTML = hero.health;
			jx.q('#hero .maxhealth').innerHTML = hero.maxhealth;
			jx.q('#hero .attack').innerHTML = hero.attack;		
			jx.q('#hero .bonus').innerHTML = hero.bonus;
		}
		function updateHero() {
			socket.emit('update hero', hero);
		}
		function onclick_attack(){
			target = getEnemyById(this.parentNode.id);
			
			fight(hero, target);
		}	
		function getEnemyById(id) {
			for(var i =0; i<enemies.length; i++) {
				if(enemies[i].id == id) return enemies[i];
			}
		}
		function removeEmeny(enemy) {
			var id = enemy.id
			jx.id(id).parentNode.removeChild(jx.id(id));
			for(var i =0; i<enemies.length; i++) {
				if(enemies[i].id == id) {
					enemies.splice(i,1);
					return;
				}
			}			
		}
		function fight(attacker, defender) {			
			defender.health -= attacker.attack;
			updateTarget();
			if( defender.health <= 0 ) {
				kill(defender);
				hero.exp += target.expbonus;
			}else{
				attacker.health -= defender.attack;
			}
			updateHero();
		}
		function kill(enemy) {
			removeEmeny(enemy);
		}
		function updateTarget() {
			if( jx.id(target.id) ) {
				jx.q('#'+target.id+' .health').innerHTML = target.health;
			}
		}
		jx.on('newEnemyBtn','click', function(){
			socket.emit('get monsters', hero.level);
		});
- else
	h1 Hero Creation
	// hero(username, hero.name, attack, health, maxhealth, exp, level)
	form(id='hero')
		label(for='name') name
		input(type='text', id='name', name='name', value='Lea')
		br
		label(for='level') level
		input(type='text', id='level', name='level', value=1)
		br
		label(for='exp') exp 
		input(type='text', id='exp', name='exp', value=0)
		br
		label(for='health') max health
		input(type='text', id='health', name='health', value=100)
		br
		label(for='attack') attack
		input(type='text', id='attack', name='attack', value=10)
		br
		label(for='bonus') bonus
		input(type='text', id='bonus', name='bonus', value=1)
		br
		input(id='submitBtn', type='button', value='Create')
	script
		jx.on('submitBtn','click', function() {
			var form = jx.id('hero');
			var hero = {
				username:'#{username}'
				, name:form.name.value
				, level:form.level.value
				, exp:form.exp.value
				, health:form.health.value
				, maxhealth:form.health.value
				, attack:form.attack.value
				, bonus:form.bonus.value
			}
			socket.emit('new hero', hero);
		});
		
